#!/bin/bash

# Script de redespliegue corregido - maneja SSL paso a paso

set -e

echo "üöÄ REDESPLIEGUE AUTOM√ÅTICO CON CONFIGURACI√ìN BLACKBOX"
echo "===================================================="

# Cargar configuraci√≥n
source_config() {
    if [ -f ".blackbox" ]; then
        echo "üìã Cargando configuraci√≥n desde .blackbox..."
        export $(grep -v '^#' .blackbox | grep '=' | xargs)
        echo "‚úÖ Configuraci√≥n cargada"
    else
        echo "‚ö†Ô∏è  Archivo .blackbox no encontrado, usando valores por defecto"
        export APP_PORT=5001
        export ENABLE_SSL=true
        export HOST=127.0.0.1
    fi
}

# Detener aplicaciones existentes (solo las que podemos)
stop_services() {
    echo "üõë Deteniendo servicios que podemos controlar..."
    
    # Detener nuestras aplicaciones Python
    pkill -f "app_configurable.py" || true
    pkill -f "app_optimized.py" || true
    
    sleep 2
    echo "‚úÖ Servicios detenidos"
}

# Configurar nginx b√°sico (sin SSL primero)
setup_nginx_basic() {
    echo "üîß Configurando nginx b√°sico (HTTP)..."
    
    # Verificar si nginx est√° instalado
    if ! command -v nginx &> /dev/null; then
        echo "üì¶ Instalando nginx..."
        sudo apt update
        sudo apt install -y nginx
    fi
    
    # Crear configuraci√≥n b√°sica HTTP
    sudo tee /etc/nginx/sites-available/prime-viz > /dev/null << EOF
server {
    listen 80;
    server_name ${DOMAIN:-ec2-44-195-68-60.compute-1.amazonaws.com};

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;

    # Proxy to Flask app
    location / {
        proxy_pass http://127.0.0.1:${APP_PORT:-5001};
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_redirect off;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Static files
    location /static/ {
        alias /home/admin/static/;
        expires 30d;
        add_header Cache-Control "public, immutable";
    }

    # Let's Encrypt verification
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }
}
EOF
    
    # Habilitar sitio
    sudo ln -sf /etc/nginx/sites-available/prime-viz /etc/nginx/sites-enabled/
    sudo rm -f /etc/nginx/sites-enabled/default
    
    # Verificar configuraci√≥n
    sudo nginx -t
    
    echo "‚úÖ Nginx b√°sico configurado"
}

# Iniciar aplicaci√≥n
start_app() {
    echo "üöÄ Iniciando aplicaci√≥n..."
    
    cd /home/admin
    
    # Crear directorio para logs si no existe
    mkdir -p logs
    
    # Iniciar aplicaci√≥n
    nohup python3 app_configurable.py > logs/app.log 2>&1 &
    
    # Esperar y verificar
    sleep 3
    
    if pgrep -f "app_configurable.py" > /dev/null; then
        echo "‚úÖ Aplicaci√≥n iniciada correctamente"
    else
        echo "‚ùå Error al iniciar aplicaci√≥n"
        echo "üìã √öltimas l√≠neas del log:"
        tail -n 10 logs/app.log 2>/dev/null || echo "No hay logs disponibles"
        exit 1
    fi
}

# Reiniciar nginx
restart_nginx() {
    echo "üîÑ Reiniciando nginx..."
    sudo systemctl restart nginx
    
    if sudo systemctl is-active --quiet nginx; then
        echo "‚úÖ Nginx reiniciado correctamente"
    else
        echo "‚ùå Error en nginx"
        sudo systemctl status nginx --no-pager
        exit 1
    fi
}

# Configurar SSL despu√©s
setup_ssl_after() {
    if [ "$ENABLE_SSL" = "true" ]; then
        echo "üîê Configurando SSL..."
        
        # Instalar certbot si no existe
        if ! command -v certbot &> /dev/null; then
            echo "üì¶ Instalando certbot..."
            sudo apt install -y certbot python3-certbot-nginx
        fi
        
        # Obtener certificado
        echo "üîê Obteniendo certificado SSL..."
        sudo certbot --nginx \
            -d ${DOMAIN:-ec2-44-195-68-60.compute-1.amazonaws.com} \
            --non-interactive \
            --agree-tos \
            --email ${SSL_EMAIL:-admin@amazonaws.com} \
            --redirect || {
                echo "‚ö†Ô∏è  Error obteniendo certificado SSL, continuando sin SSL"
                echo "üìã La aplicaci√≥n estar√° disponible solo por HTTP"
                return 0
            }
        
        # Habilitar renovaci√≥n autom√°tica
        sudo systemctl enable certbot.timer || true
        
        echo "‚úÖ SSL configurado"
    fi
}

# Verificar despliegue
verify_deployment() {
    echo "üîç Verificando despliegue..."
    
    # Verificar aplicaci√≥n local
    sleep 2
    if curl -s http://127.0.0.1:${APP_PORT:-5001}/api/info > /dev/null; then
        echo "‚úÖ Aplicaci√≥n Flask respondiendo localmente"
    else
        echo "‚ö†Ô∏è  Aplicaci√≥n Flask no responde localmente"
    fi
    
    # Mostrar estado
    echo ""
    echo "üìä Estado de servicios:"
    echo "  ‚Ä¢ Aplicaci√≥n Flask: $(pgrep -f 'app_configurable.py' > /dev/null && echo '‚úÖ Corriendo' || echo '‚ùå Detenida')"
    echo "  ‚Ä¢ Nginx: $(sudo systemctl is-active nginx 2>/dev/null || echo '‚ùå Detenido')"
    
    # Verificar SSL
    SSL_STATUS="‚ùå No configurado"
    if [ "$ENABLE_SSL" = "true" ] && sudo certbot certificates 2>/dev/null | grep -q "${DOMAIN:-ec2-44-195-68-60.compute-1.amazonaws.com}"; then
        SSL_STATUS="‚úÖ Configurado"
    fi
    echo "  ‚Ä¢ SSL: $SSL_STATUS"
    
    # Mostrar URLs de acceso
    echo ""
    echo "üåê URLs de acceso:"
    if [ "$SSL_STATUS" = "‚úÖ Configurado" ]; then
        echo "  ‚Ä¢ HTTPS: https://${DOMAIN:-ec2-44-195-68-60.compute-1.amazonaws.com}"
        echo "  ‚Ä¢ HTTP: http://${DOMAIN:-ec2-44-195-68-60.compute-1.amazonaws.com} (redirige a HTTPS)"
    else
        echo "  ‚Ä¢ HTTP: http://${DOMAIN:-ec2-44-195-68-60.compute-1.amazonaws.com}"
    fi
    echo "  ‚Ä¢ Local: http://127.0.0.1:${APP_PORT:-5001}"
    
    # Mostrar informaci√≥n de configuraci√≥n actual
    echo ""
    echo "üìã Configuraci√≥n actual (.blackbox):"
    echo "  ‚Ä¢ Puerto: ${APP_PORT:-5001}"
    echo "  ‚Ä¢ SSL habilitado: ${ENABLE_SSL:-true}"
    echo "  ‚Ä¢ Dominio: ${DOMAIN:-ec2-44-195-68-60.compute-1.amazonaws.com}"
    echo "  ‚Ä¢ M√©todo: ${DEPLOY_METHOD:-flask}"
    
    echo ""
    echo "üìã Para ver logs:"
    echo "  ‚Ä¢ App: tail -f /home/admin/logs/app.log"
    echo "  ‚Ä¢ Nginx: sudo tail -f /var/log/nginx/error.log"
}

# Ejecuci√≥n principal
main() {
    echo "Iniciando redespliegue..."
    
    source_config
    stop_services
    setup_nginx_basic
    start_app
    restart_nginx
    setup_ssl_after
    verify_deployment
    
    echo ""
    echo "‚úÖ ¬°REDESPLIEGUE COMPLETADO!"
    echo "üîß Para cambiar puerto u otras opciones, edita .blackbox y ejecuta:"
    echo "   bash redeploy_fixed.sh"
}

# Ejecutar funci√≥n principal
main